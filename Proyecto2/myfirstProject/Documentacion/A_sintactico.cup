package analizadores;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.ArrayList;
import java.io.IOException;
import java.io.PrintWriter;

parser code 
{:
    public static Nodo1 padre;
    public int cont = 0;
    public static LinkedList<TError> errores = new LinkedList<TError>();
    public static ArrayList<String> vars = new ArrayList<String>();


    public static String tipo="Lista";
    public String codigoTraducidoPython="";
    public String pruebas = "";
    public String pruebas2 = "";
    public String codigoTraducidoGolang="";
    public String errorm="";

    public static boolean isNumeric(String cadena) {

        boolean resultado;

        try {
            Integer.parseInt(cadena);
            resultado = true;
        } catch (NumberFormatException excepcion) {
            resultado = false;
        }

        return resultado;
    }
    
    
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("Error Sintáctico en la Línea " + (s.right + 1) +
        " Columna "+s.left + ". No se esperaba este caracter: " +s.value+".");
        TError tmp = new TError("Sintactico",lexema,"Caracter no esperado",fila,columna);
        errores.add(tmp);
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left + 1)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 

        TError tmp = new TError("Sintactico",lexema, "TOKEN NO ERA EL ESPERADO",fila,columna);
        errores.add(tmp);
    }  
:}


//definicion de terminales
terminal String numero;
terminal String tvariable;
terminal String tcaracter;
terminal String tpunto;
terminal String tcoma;
terminal String tpuntoycoma;
terminal String tcadena;
terminal String tsuma;
terminal String tresta;
terminal String tmultiplicacion;
terminal String tdivision;
terminal String tmodulo;
terminal String tparA;
terminal String tparC;
terminal String tcorA;
terminal String tcorC;
terminal String tguionBajo;
terminal String tflecha;
terminal String tinterrogaciona;
terminal String tinterrogacionc;
terminal String tigual;
terminal String prInicio;
terminal String prBoolean;
terminal String prVerdadero;
terminal String prFalso;
terminal String prCaracter;
terminal String prNumero;
terminal String prCadena;
terminal String prPotencia;
terminal String prMod;
terminal String prIngresar;
terminal String prComo;
terminal String prConValor;
terminal String prSi;
terminal String prMayor;
terminal String prMenor;
terminal String prMayorIgual;
terminal String prMenorIgual;
terminal String prEsIGUAL;
terminal String prEsDiferente;
terminal String prOR;
terminal String prAND;
terminal String prNOT;
terminal String prEntonces;
terminal String prFinSi;
terminal String prOSi;
terminal String prDeloContrario;
terminal String prSegun;
terminal String prHacer;
terminal String prFinSegun;
terminal String prPara;
terminal String prHasta;
terminal String prFinPara;
terminal String prIncremental;
terminal String prMientras;
terminal String prFinMientras;
terminal String prRepetir;
terminal String prHastaQue;
terminal String prRetornar;
terminal String prMetodo;
terminal String prConParametros;
terminal String prFinMetodo;
terminal String prFuncion;
terminal String prFinFuncion;
terminal String prEjecutar;
terminal String prImprimir;
terminal String prImprimirNl;
terminal String prFin;



//definicion de no terminales
non terminal INICIO,INSTRUCCIONES,INSTRUCCION;
non terminal DECLARACIONES,ASIGNACIONES,IF,LISTAOSI,SEGUN,CICLO_FOR, CICLO_WHILE; 
non terminal CICLO_DOWHILE,RETORNO,METODO,FUNCIONES,EJECUTAR,IMPRIMIR,IMPRIMIRNL;
non terminal DECLARARNUML,DECLARARCADENA,DECLARARCADENAL,DECLARARBOOLEANO,DECLARARBOOLEANOL,DECLARARCARACTER;
non terminal DECLARARCARACTERL,LISTAVARIABLES,LISTAVARIABLES2,DECLARARCONOPERACION,CONDICIONIF;
non terminal ASIGNARNUM,ASIGNARNUML,ASIGNARCADENA,ASIGNARCADENAL,ASIGNARBOOLEANO,ASIGNARBOOLEANOL,ASIGNARCARACTER,ASIGNARCARACTERL;
non terminal EXPRESIONARITMETICA,EXPRESIONES,EXPRESION, INSTRUCCIONSEGUN;
non terminal CONDICIONMIENTRAS, LISTAPARAMETROS, TIPODATO;
non terminal RELACIONAL,LOGICO;

//precedencia de los operadores

precedence left tsuma;
precedence left tresta, tmultiplicacion,tdivision, prMod, prPotencia;
precedence left prMayor, prMenor, prMayorIgual, prMenorIgual, prEsIGUAL,prEsDiferente;
precedence left prOR, prAND;
precedence right prNOT;


//gramaticas
start with INICIO;

INICIO::= prInicio:pinic INSTRUCCIONES:n prFin:pfin {:
 String fileName = "SalidaTraducidaPY.py";
    try{
    PrintWriter writer = new PrintWriter(fileName);
    writer.println("def main():");
    writer.println(codigoTraducidoPython);
    writer.println("");
    writer.println("");
    writer.println("if __name__ == '__main__':");
    writer.println("\tmain()");
    writer.println("");
    writer.close();
    }
    catch (IOException e){
      System.out.println("An error occurred.");
      e.printStackTrace();
      }


 String fileName1 = "SalidaTraducidaGO.go";
    try{
    PrintWriter writer = new PrintWriter(fileName1);
    writer.println("package main");
    writer.println("import" + "\t" + "\"fmt\"");
    writer.println("func main() {");
    writer.println(codigoTraducidoGolang);
    writer.println("}");
    writer.println("");
    writer.close();
    }
    catch (IOException e){
      System.out.println("An error occurred.");
      e.printStackTrace();
      }

Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("GLOBAL");
nd.setIdNod(parser.cont);
nd1.setEtiqueta("prInicio");
nd1.setValor(pinic.toString());
nd2.setEtiqueta("prFin");
nd3.setEtiqueta(pinic.toString());
nd4.setEtiqueta(pfin.toString());
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos ((Nodo1) nd1);
nd.AddHijos((Nodo1) n);
nd.AddHijos((Nodo1) nd2);
nd1.AddHijos((Nodo1) nd3);
nd2.AddHijos((Nodo1) nd4);
parser.padre = (Nodo1) nd;
RESULT= nd;
:}
;



INSTRUCCIONES::= INSTRUCCION:n  INSTRUCCIONES:n1 {: RESULT=n;
RESULT=n1;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("Instrucciones");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n);
nd.AddHijos((Nodo1) n1);
RESULT= nd;


  :}
                | INSTRUCCION:n {: RESULT=n;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("Instrucciones");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n);
RESULT= nd;
 :}
;


INSTRUCCION::= DECLARACIONES:n {: RESULT=n;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("Declaracion");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n);
RESULT= nd;
:}
            | ASIGNACIONES:n {: RESULT=n;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("Asignacion");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n);
RESULT= nd;
:}
            | IF:n {: RESULT=n;
codigoTraducidoPython += RESULT;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("IF");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n);
RESULT= nd;
 :}
            | SEGUN:n {: RESULT=n;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("Segun");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n);
RESULT= nd;
 :}
            | CICLO_FOR:n {: RESULT=n;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("Para");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n);
RESULT= nd;
 :}
            | CICLO_WHILE:n {: RESULT=n;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("Mientras");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n);
RESULT= nd;
:}
            | CICLO_DOWHILE:n {: RESULT=n;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("Mientras_Hacer");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n);
RESULT= nd;
:}
            | RETORNO:n {: RESULT=n;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("Retorno");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n);
RESULT= nd;
:}
            | METODO:n {:  RESULT=n;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("Metodo");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n);
RESULT= nd;
:}
            | FUNCIONES:n {: RESULT=n;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("Funciones");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n);
RESULT= nd;
:}
            | EJECUTAR:n {: RESULT=n;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("Ejecutar");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n);
RESULT= nd;
:}
            | IMPRIMIR:n {: RESULT=n;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("Imprimir");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n);
RESULT= nd;
:}
            | IMPRIMIRNL:n1 {: RESULT=n1;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("Imprimir_nl");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n1);
RESULT= nd;
:}
            | error:err {: RESULT = err;:}
;

//gramatica para las declaraciones

DECLARACIONES::= DECLARARCONOPERACION:n {: RESULT= n; :}
            | DECLARARNUML:n {:RESULT= n; :}
            | DECLARARCADENA:n {:RESULT= n; :}
            | DECLARARCADENAL:n {: RESULT= n; :}
            | DECLARARBOOLEANO:n {: RESULT= n;:}
            | DECLARARBOOLEANOL:n {: RESULT= n; :}
            | DECLARARCARACTER:n {: RESULT= n; :}
            | DECLARARCARACTERL:n {: RESULT= n; :}
;

//Lista de variables

LISTAVARIABLES::= tvariable:a LISTAVARIABLES2 {: vars.add(a); :}
            |
;

LISTAVARIABLES2::= tcoma tvariable:a LISTAVARIABLES2 {: vars.add(a); :}
            | tcoma tvariable:a {: vars.add(a); :}
;

//declaracion de operaciones

DECLARARCONOPERACION::= prIngresar:pri tvariable:a prComo:co prNumero:nm prConValor:c1 EXPRESIONARITMETICA:b tpuntoycoma:comaa {: a = a.replace("_", "");
RESULT = a + " = " + b + "\n";
codigoTraducidoPython += "\t" + a + " = " + b + "\n";
codigoTraducidoGolang += "var " + a + " float64 " + " = " + pruebas + "\n";
codigoTraducidoGolang += "var " + a + " float64 " + " = " + b + "\n";
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("variable");
nd2.setValor(a.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(co.toString());
nd4.setEtiqueta("tipo_dato");
nd4.setValor(nm.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(c1.toString());
nd6.setEtiqueta("Expresion");
nd6.setValor(b.toString());
nd7.setEtiqueta("Puntocoma");
nd7.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
:} 

                    | prIngresar:pri tvariable:a prComo:co prBoolean:bl prConValor:c1 EXPRESIONARITMETICA:b tpuntoycoma:comaa {: a = a.replace("_", "");
codigoTraducidoPython += "\t" + a + " = " + b + "\n";
codigoTraducidoGolang += "var " + a + " bool " + " = " + b + "\n"; 
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("variable");
nd2.setValor(a.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(co.toString());
nd4.setEtiqueta("tipo_dato");
nd4.setValor(bl.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(c1.toString());
nd6.setEtiqueta("Expresion");
nd6.setValor(b.toString());
nd7.setEtiqueta("Puntocoma");
nd7.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
:}
;

EXPRESIONARITMETICA::= EXPRESIONARITMETICA:b EXPRESIONES:a {: RESULT=b;:}
            | EXPRESIONES:a {: RESULT=a;:}
;

EXPRESIONES::= EXPRESION:e {: System.out.println("=" + e + ";"); RESULT=e; :}
            | RELACIONAL:e {: RESULT= e; :}
            | LOGICO:e {: RESULT = e;:}
;

EXPRESION::= numero:n {: RESULT=n; :}
        | EXPRESION:I tsuma EXPRESION:r {: RESULT= I + " + " + r ;:}
        | EXPRESION:I tresta EXPRESION:r {: RESULT= I + " - " + r ;:}
        | EXPRESION:I tmultiplicacion EXPRESION:r {: RESULT= I + " * " + r ; :}
        | EXPRESION:I tdivision EXPRESION:r {: RESULT= I + " / " + r ; :}
        | EXPRESION:I prMod EXPRESION:r {:RESULT= I + "%" + r; :}
        | EXPRESION:I prPotencia EXPRESION:r {: RESULT= I + "**" + r; pruebas= "math.Pow(" + "float64" + "(" + I + ")," + "float64" + "(" + r + ")" + ")" + "\n";  :}
        | tparA:para EXPRESION:e tparC {: RESULT= "(" + e + ")"; :}
        | tcorA:para EXPRESION:e tcorC {: RESULT= "[" + e + "]"; :}
        | tparA:para RELACIONAL:e tparC {: RESULT= "(" + e + ")";  :}
        | tcorA:para RELACIONAL:e tcorC {: RESULT= "[" + e + "]";  :}
        | tparA:para LOGICO:e tparC {: RESULT= "(" + e + ")";:}
        | tcorA:para LOGICO:e tcorC {: RESULT= "[" + e + "]"; :}
        | tvariable:b {: RESULT= b;:}
;


RELACIONAL::= EXPRESION:op1 prMayor:signo EXPRESION:op2 {: RESULT=op1+">"+op2; :}
        | EXPRESION:op1 prMenor:signo EXPRESION:op2 {: RESULT=op1+"<"+op2; :}
        | EXPRESION:op1 prMayorIgual:signo EXPRESION:op2 {: RESULT=op1+">="+op2; :}
        | EXPRESION:op1 prMenorIgual:signo EXPRESION:op2 {: RESULT=op1+"<="+op2; :}
        | EXPRESION:op1 prEsIGUAL:signo EXPRESION:op2 {: RESULT=op1+"=="+op2; :}
        | EXPRESION:op1 prEsDiferente:signo EXPRESION:op2 {: RESULT=op1+"!="+op2; :}
;   


LOGICO::= EXPRESION:op1 prOR:signo EXPRESION:op2 {: RESULT=op1+"or"+op2;:}
        | EXPRESION:op1 prAND:signo EXPRESION:op2 {: RESULT=op1+"and"+op2; :}
        | EXPRESION:op1 prNOT:signo EXPRESION:op2 {: RESULT=op1+"not"+op2; :}
; 


//declaracion de numeros


DECLARARNUML::= prIngresar:pri LISTAVARIABLES:a prComo:co prNumero:nm prConValor:c1 numero:b tpuntoycoma:comaa {: 
for (String varia : vars) {
    varia = varia.replace("_", "");
  codigoTraducidoPython += "\t" + varia + " = " + nm + "\n" ;
  codigoTraducidoGolang += "var " + varia + " float64 " + " = " + nm + "\n";
}
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("variables");
nd2.setValor(vars.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(co.toString());
nd4.setEtiqueta("tipo_dato");
nd4.setValor(nm.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(c1.toString());
nd6.setEtiqueta("Expresion");
nd6.setValor(b.toString());
nd7.setEtiqueta("Puntocoma");
nd7.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
vars.clear(); 
:}
;

//declaracion de cadenas

DECLARARCADENA::= prIngresar:pri tvariable:a prComo:co prCadena:cad prConValor:c1 tcadena:b tpuntoycoma:comaa 
{: a = a.replace("_", "");
codigoTraducidoPython += "\t" + a + " = " + b + "\n" ; 
codigoTraducidoGolang += "var " + a + " string " + " = " + b + "\n";
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
b = b.replace("\"","");
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("variable");
nd2.setValor(a.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(co.toString());
nd4.setEtiqueta("tipo_dato");
nd4.setValor(cad.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(c1.toString());
nd6.setEtiqueta("Expresion");
nd6.setValor(b.toString());
nd7.setEtiqueta("Puntocoma");
nd7.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
:}
;

DECLARARCADENAL::= prIngresar:pri LISTAVARIABLES prComo:co prCadena:cade prConValor:c1 tcadena:cad tpuntoycoma:comaa {: 
for (String varia : vars) {
    varia = varia.replace("_", "");
  codigoTraducidoPython += "\t" + varia + " = " + cad + "\n" ;
  codigoTraducidoGolang += "var " + varia + " string " + " = " + cad + "\n";
}
cad = cad.replace("\"", "");
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("variables");
nd2.setValor(vars.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(co.toString());
nd4.setEtiqueta("tipo_dato");
nd4.setValor(cad.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(c1.toString());
nd6.setEtiqueta("Expresion");
nd6.setValor(cad.toString());
nd7.setEtiqueta("Puntocoma");
nd7.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
vars.clear(); :}
;

//declaracion de booleanos

DECLARARBOOLEANO::= prIngresar:pri tvariable:a prComo:co prBoolean:bl prConValor:c1 prVerdadero:b tpuntoycoma:comaa {: a = a.replace("_", "");
codigoTraducidoPython += "\t" +  a + " = " + "True" + "\n" ;
codigoTraducidoGolang += "var " + a + " bool " + " = " + "true" + "\n";  
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("variable");
nd2.setValor(a.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(co.toString());
nd4.setEtiqueta("tipo_dato");
nd4.setValor(bl.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(c1.toString());
nd6.setEtiqueta("Expresion");
nd6.setValor(b.toString());
nd7.setEtiqueta("Puntocoma");
nd7.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
:}   
                |  prIngresar:pri tvariable:a prComo:co prBoolean:bl prConValor:c1 prFalso:b tpuntoycoma:comaa {: a = a.replace("_", "");
codigoTraducidoPython += "\t" + a + " = " + "False" + "\n" ; 
codigoTraducidoGolang += "var " + a + " bool " + " = " + "false" + "\n"; 
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("variable");
nd2.setValor(a.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(co.toString());
nd4.setEtiqueta("tipo_dato");
nd4.setValor(bl.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(c1.toString());
nd6.setEtiqueta("Expresion");
nd6.setValor(b.toString());
nd7.setEtiqueta("Puntocoma");
nd7.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
:}   
;

DECLARARBOOLEANOL::= prIngresar:pri LISTAVARIABLES prComo:co prBoolean:bl prConValor:c1 prVerdadero:v tpuntoycoma:comaa {: 
for (String varia : vars) {
    varia = varia.replace("_", "");
  codigoTraducidoPython += "\t" + varia + " = " + v + "\n" ;
  codigoTraducidoGolang += "var " + varia + " bool " + " = " + "true" + "\n"; 
}

Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("variables");
nd2.setValor(vars.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(co.toString());
nd4.setEtiqueta("tipo_dato");
nd4.setValor(bl.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(c1.toString());
nd6.setEtiqueta("Expresion");
nd6.setValor(v.toString());
nd7.setEtiqueta("Puntocoma");
nd7.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
vars.clear(); 
 :}
                | prIngresar:pri LISTAVARIABLES prComo:co prBoolean:bl prConValor:c1 prFalso:f tpuntoycoma:comaa {: 
for (String varia : vars) {
    varia = varia.replace("_", "");
  codigoTraducidoPython += "\t" + varia + " = " + f + "\n" ;
codigoTraducidoGolang += "var " + varia + " bool " + " = " + "false" + "\n";
}

Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("variables");
nd2.setValor(vars.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(co.toString());
nd4.setEtiqueta("tipo_dato");
nd4.setValor(bl.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(c1.toString());
nd6.setEtiqueta("Expresion");
nd6.setValor(f.toString());
nd7.setEtiqueta("Puntocoma");
nd7.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
vars.clear(); 
:}
;

//declaracion de caracteres

DECLARARCARACTER::= prIngresar:pri tvariable:a prComo:co prCaracter:car prConValor:c1 tcaracter:b tpuntoycoma:comaa
{: a = a.replace("_", "");
b = b.replace("$","");
b = b.replace("{","");
b = b.replace("}","");
b = b.replace("'","");

        if (isNumeric(b) == true) {
            int prueba = Integer.parseInt(b);
            char convertedChar =  (char)prueba;
            String s=String.valueOf(convertedChar);
            codigoTraducidoPython += "\t" + a + " = " + "'" +  s  + "'" + "\n";
            codigoTraducidoGolang += "var " + a + " byte " + " = " + "'" +  s + "'" + "\n";
            //System.out.println("Es un número");
        } else {
            codigoTraducidoPython += "\t" + a + " = " + "'" + b  + "'" + "\n";
            codigoTraducidoGolang += "var " + a + " byte " + " = " + "'" + b + "'" + "\n";
            //System.out.println("Es una letra");
        }

Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("variable");
nd2.setValor(a.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(co.toString());
nd4.setEtiqueta("tipo_dato");
nd4.setValor(car.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(c1.toString());
nd6.setEtiqueta("Expresion");
nd6.setValor(b.toString());
nd7.setEtiqueta("Puntocoma");
nd7.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;


:}
;

DECLARARCARACTERL::= prIngresar:pri LISTAVARIABLES prComo:co prCaracter:car prConValor:c1 tcaracter:b tpuntoycoma:comaa {: 
b = b.replace("$","");
b = b.replace("{","");
b = b.replace("}","");
b = b.replace("'","");

        if (isNumeric(b) == true) {
            int prueba = Integer.parseInt(b);
            char convertedChar =  (char)prueba;
            String s=String.valueOf(convertedChar);
            for (String varia : vars) {
            System.out.println("es el for " + varia);
              varia = varia.replace("_", "");
            codigoTraducidoPython += "\t" + varia + " = " + "'" +  s  + "'" + "\n";
            codigoTraducidoGolang += "var " + varia + " byte " + " = " + "'" + s + "'" + "\n";
            }
            vars.clear();
            //System.out.println("Es un número");
        } else {
            for (String varia : vars) {
            System.out.println("es el for " + varia);
              varia = varia.replace("_", "");
             codigoTraducidoPython += "\t" + varia + " = " + "'" + b  + "'" + "\n";
             codigoTraducidoGolang += "var " + varia + " byte " + " = " + "'" + b + "'" + "\n";
            }
            vars.clear();
            //System.out.println("Es una letra");
        }

Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("variables");
nd2.setValor(vars.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(co.toString());
nd4.setEtiqueta("tipo_dato");
nd4.setValor(car.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(c1.toString());
nd6.setEtiqueta("Expresion");
nd6.setValor(b.toString());
nd7.setEtiqueta("Puntocoma");
nd7.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
vars.clear(); 

 
:}
;

// gramatica para las asignaciones


ASIGNACIONES::= ASIGNARNUM:n {: RESULT=n; :}
            | ASIGNARNUML:n {: RESULT=n; :}
            | ASIGNARCADENA:n {: RESULT=n; :}
            | ASIGNARCADENAL:n {: RESULT=n; :}
            | ASIGNARBOOLEANO:n {: RESULT=n; :}
            | ASIGNARBOOLEANOL:n {: RESULT=n; :}
            | ASIGNARCARACTER:n {: RESULT=n; :}
            | ASIGNARCARACTERL:n {: RESULT=n; :}
;

//asignando numeros

ASIGNARNUM::= tvariable:a tflecha:flech EXPRESIONARITMETICA:b tpuntoycoma:comaa {: a = a.replace("_", "");
codigoTraducidoPython += "\t" + a + " = " + b + "\n";
codigoTraducidoGolang += "var " + a + " float64 " + " = " + b + "\n"; 
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Variable");
nd1.setValor(a.toString());
nd2.setEtiqueta("flecha");
nd2.setValor(flech.toString());
nd3.setEtiqueta("Expresion");
nd3.setValor(b.toString());
nd4.setEtiqueta("Puntocoma");
nd4.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
:}    
;

ASIGNARNUML::= LISTAVARIABLES tflecha:flech EXPRESIONARITMETICA:num tpuntoycoma:comaa {: 
for (String varia : vars) {
  System.out.println("es el for " + varia);
    varia = varia.replace("_", "");
  codigoTraducidoPython += "\t" + varia + " = " + num + "\n" ;
  codigoTraducidoGolang += "var " + varia + " float64 " + " = " + num + "\n";
}
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Variables");
nd1.setValor(vars.toString());
nd2.setEtiqueta("flecha");
nd2.setValor(flech.toString());
nd3.setEtiqueta("Expresion");
nd3.setValor(num.toString());
nd4.setEtiqueta("Puntocoma");
nd4.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
vars.clear(); 
:}
;

//asignando cadena

ASIGNARCADENA::= tvariable:a tflecha:flech tcadena:b tpuntoycoma:comaa {: a = a.replace("_", "");
codigoTraducidoPython += "\t" + a + " = " + b + "\n"; 
codigoTraducidoGolang += "var " + a + " string " + " = " + b + "\n";
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
b = b.replace("\"","");
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Variable");
nd1.setValor(a.toString());
nd2.setEtiqueta("flecha");
nd2.setValor(flech.toString());
nd3.setEtiqueta("Expresion");
nd3.setValor(b.toString());
nd4.setEtiqueta("Puntocoma");
nd4.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
:}   
;

ASIGNARCADENAL::= LISTAVARIABLES tflecha:flech tcadena:cad tpuntoycoma:comaa {: 
for (String varia : vars) {
  System.out.println("es el for " + varia);
    varia = varia.replace("_", "");
  codigoTraducidoPython += "\t" + varia + " = " + cad + "\n";
  codigoTraducidoGolang += "var " + varia + " string " + " = " + cad + "\n";
}
cad = cad.replace("\"","");
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Variables");
nd1.setValor(vars.toString());
nd2.setEtiqueta("flecha");
nd2.setValor(flech.toString());
nd3.setEtiqueta("Expresion");
nd3.setValor(cad.toString());
nd4.setEtiqueta("Puntocoma");
nd4.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
vars.clear(); 
:}
;

//asignando booleano

ASIGNARBOOLEANO::= tvariable:a tflecha:flech prVerdadero:b tpuntoycoma:comaa {: a = a.replace("_", "");
codigoTraducidoPython += "\t" + a + " = " + "True" + "\n";
codigoTraducidoGolang += "var " + a + " bool " + " = " + "true" + "\n"; 
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Variable");
nd1.setValor(a.toString());
nd2.setEtiqueta("flecha");
nd2.setValor(flech.toString());
nd3.setEtiqueta("Expresion");
nd3.setValor(b.toString());
nd4.setEtiqueta("Puntocoma");
nd4.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
 :}   
                | tvariable:a tflecha:flech prFalso:b tpuntoycoma:comaa {: a = a.replace("_", "");
codigoTraducidoPython += "\t" + a + " = " + "False" + "\n"; 
codigoTraducidoGolang += "var " + a + " bool " + " = " + "false" + "\n"; 
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Variable");
nd1.setValor(a.toString());
nd2.setEtiqueta("flecha");
nd2.setValor(flech.toString());
nd3.setEtiqueta("Expresion");
nd3.setValor(b.toString());
nd4.setEtiqueta("Puntocoma");
nd4.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

:}   
;

ASIGNARBOOLEANOL::= LISTAVARIABLES tflecha:flech prVerdadero:v tpuntoycoma:comaa {: 
for (String varia : vars) {
  System.out.println("es el for " + varia);
    varia = varia.replace("_", "");
  codigoTraducidoPython += "\t" +  varia + " = " + v + "\n";
  codigoTraducidoGolang += "var " + varia + " bool " + " = " + "true" + "\n"; 
}
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Variables");
nd1.setValor(vars.toString());
nd2.setEtiqueta("flecha");
nd2.setValor(flech.toString());
nd3.setEtiqueta("Expresion");
nd3.setValor(v.toString());
nd4.setEtiqueta("Puntocoma");
nd4.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
vars.clear(); 
 :}
                | LISTAVARIABLES tflecha:flech prFalso:f tpuntoycoma:comaa {: 
for (String varia : vars) {
  System.out.println("es el for " + varia);
    varia = varia.replace("_", "");
  codigoTraducidoPython += "\t" + varia + " = " + f + "\n";
  codigoTraducidoGolang += "var " + varia + " bool " + " = " + "false" + "\n"; 
}
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Variables");
nd1.setValor(vars.toString());
nd2.setEtiqueta("flecha");
nd2.setValor(flech.toString());
nd3.setEtiqueta("Expresion");
nd3.setValor(f.toString());
nd4.setEtiqueta("Puntocoma");
nd4.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
vars.clear(); 
:}
;

//asignando caracter

ASIGNARCARACTER::= tvariable:a tflecha:flech tcaracter:b tpuntoycoma:comaa {: a = a.replace("_", "");
b = b.replace("$","");
b = b.replace("{","");
b = b.replace("}","");
b = b.replace("'","");

        if (isNumeric(b) == true) {
            int prueba = Integer.parseInt(b);
            char convertedChar =  (char)prueba;
            String s=String.valueOf(convertedChar);
            codigoTraducidoPython += "\t" + a + " = " + "'" +  s  + "'" + "\n";
            codigoTraducidoGolang += "var " + a + " byte " + " = " +  "'" + s + "'" + "\n";
            //System.out.println("Es un número");
        } else {
            codigoTraducidoPython += "\t" + a + " = " + "'" + b  + "'" + "\n";
            codigoTraducidoGolang += "var " + a + " byte " + " = " + "'" + b + "'" + "\n";
            //System.out.println("Es una letra");
        }

Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Variable");
nd1.setValor(a.toString());
nd2.setEtiqueta("flecha");
nd2.setValor(flech.toString());
nd3.setEtiqueta("Expresion");
nd3.setValor(b.toString());
nd4.setEtiqueta("Puntocoma");
nd4.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
:}   
;

ASIGNARCARACTERL::= LISTAVARIABLES tflecha:flech tcaracter:b tpuntoycoma:comaa {: 
b = b.replace("$","");
b = b.replace("{","");
b = b.replace("}","");
b = b.replace("'","");

        if (isNumeric(b) == true) {
            int prueba = Integer.parseInt(b);
            char convertedChar =  (char)prueba;
            String s=String.valueOf(convertedChar);
            for (String varia : vars) {
            System.out.println("es el for " + varia);
              varia = varia.replace("_", "");
            codigoTraducidoPython += "\t" + varia + " = " + "'" +  s  + "'" + "\n";
            codigoTraducidoGolang += "var " + varia + " byte " + " = " + "'" + s + "'" + "\n";
            }
            vars.clear();
            //System.out.println("Es un número");
        } else {
            for (String varia : vars) {
            System.out.println("es el for " + varia);
              varia = varia.replace("_", "");
             codigoTraducidoPython += "\t"  + varia + " = " + "'" + b  + "'" + "\n";
             codigoTraducidoGolang += "var " + varia + " byte " + " = " + "'" + b + "'" + "\n";
            }
            vars.clear();
            //System.out.println("Es una letra");
        } 

Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Variables");
nd1.setValor(vars.toString());
nd2.setEtiqueta("flecha");
nd2.setValor(flech.toString());
nd3.setEtiqueta("Expresion");
nd3.setValor(b.toString());
nd4.setEtiqueta("Puntocoma");
nd4.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
vars.clear(); 

:}
;

//Sentencias
// IF

IF::= prSi:iif CONDICIONIF:a prEntonces:en INSTRUCCIONES:in prFinSi:fnsi {: RESULT += "if" +  a  + "\n" + in;
codigoTraducidoPython += RESULT; 
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(iif.toString());
nd2.setEtiqueta("Condicion");
nd2.setValor(a.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(en.toString());
nd4.setEtiqueta("Palabra_Reservada");
nd4.setValor(fnsi.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) in);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

:}
    | prSi:iif CONDICIONIF:a prEntonces:en INSTRUCCIONES:in prDeloContrario:contr INSTRUCCIONES:in2 prFinSi:fnsi {: codigoTraducidoPython += "if " + a + "\n" + in + " else: " + "\n" + in2 +  "\n"; 
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(iif.toString());
nd2.setEtiqueta("Condicion");
nd2.setValor(a.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(en.toString());
nd4.setEtiqueta("Palabra_Reservada");
nd4.setValor(contr.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(fnsi.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) in);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) in2);
nd.AddHijos((Nodo1) nd5);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

:}
    | prSi:iif CONDICIONIF:a prEntonces:en INSTRUCCIONES:in LISTAOSI:ls prDeloContrario:contr INSTRUCCIONES:in2 prFinSi:fnsi {: codigoTraducidoPython += "if " +  a  + "\n" + in + ls + in2 + " else: " + "\n" + in2 +  "\n"; 
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(iif.toString());
nd2.setEtiqueta("Condicion");
nd2.setValor(a.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(en.toString());
nd4.setEtiqueta("Palabra_Reservada");
nd4.setValor(contr.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(fnsi.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) in);
nd.AddHijos((Nodo1) ls);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) in2);
nd.AddHijos((Nodo1) nd5);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

:}
;

LISTAOSI::= prOSi:osii CONDICIONIF:a prEntonces:en INSTRUCCIONES:in LISTAOSI:lis {: RESULT= "else " +  a + in + lis  + "\n" ;
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
nd.setEtiqueta("Lista O_Si");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(osii.toString());
nd2.setEtiqueta("Condicion");
nd2.setValor(a.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(en.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) in);
nd.AddHijos((Nodo1) lis);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

:}
            | prOSi:osii CONDICIONIF:a prEntonces:en INSTRUCCIONES:in {: RESULT= "else " + a +  in + "\n"; 
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
nd.setEtiqueta("O_Si");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(osii.toString());
nd2.setEtiqueta("Condicion");
nd2.setValor(a.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(en.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) in);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
:}
;

CONDICIONIF::= tvariable:a prEsIGUAL EXPRESIONARITMETICA:b {: a = a.replace("_", "");
  RESULT = "("+ a + "==" + b + "):" + "\n"; :}
            | tvariable:a {: a = a.replace("_", ""); 
  RESULT = "("+ a + "):" + "\n"; :}
            | tvariable:a prMayorIgual EXPRESIONARITMETICA:b {: a = a.replace("_", ""); 
  RESULT = "("+ a + ">=" + b + "):" + "\n"; :}
            | tvariable:a prMenorIgual EXPRESIONARITMETICA:b {: a = a.replace("_", "");
  RESULT = "("+ a + "<=" + b + "):" + "\n"; :}
            | tvariable:a prMayor EXPRESIONARITMETICA:b {: a = a.replace("_", "");
  RESULT = "("+ a + ">" + b + "):" + "\n"; :}
            | tvariable:a prMenor EXPRESIONARITMETICA:b {: a = a.replace("_", "");
  RESULT = "("+ a + "<" + b + "):" + "\n"; :}
            | tvariable:a prOR EXPRESIONARITMETICA:b {: a = a.replace("_", "");
  RESULT = "("+ a + "or" + b + "):" + "\n"; :}
            | tvariable:a prAND EXPRESIONARITMETICA:b {: a = a.replace("_", "");
  RESULT = "("+ a + "and" + b + "):" + "\n"; :}
            | prNOT EXPRESIONARITMETICA:b {: 
  RESULT = "(" + "not" + b + "):" + "\n"; :}
;

// SEGUN

SEGUN::= prSegun:seg EXPRESIONARITMETICA:exp prHacer:hac INSTRUCCIONSEGUN:inseg prDeloContrario:contr prEntonces:en INSTRUCCIONES:in prFinSegun:fnsegun {: 
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
nd.setEtiqueta("Entrada Segun");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(seg.toString());
nd2.setEtiqueta("Expresion");
nd2.setValor(exp.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(hac.toString());
nd4.setEtiqueta("Palabra_Reservada");
nd4.setValor(contr.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(en.toString());
nd6.setEtiqueta("Palabra_Reservada");
nd6.setValor(fnsegun.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) inseg);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) in);
nd.AddHijos((Nodo1) nd6);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
:}
        | prSegun:seg EXPRESIONARITMETICA:exp prHacer:hac INSTRUCCIONSEGUN:inseg prFinSegun:fnsegun {:
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Entrada Segun");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(seg.toString());
nd2.setEtiqueta("Expresion");
nd2.setValor(exp.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(hac.toString());
nd4.setEtiqueta("Palabra_Reservada");
nd4.setValor(fnsegun.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) inseg);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
:}
;

INSTRUCCIONSEGUN::= tinterrogaciona:interA EXPRESIONARITMETICA:exp tinterrogacionc:interC prEntonces:en INSTRUCCIONES:in INSTRUCCIONSEGUN:lis  {:RESULT=exp;
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Instruccion Segun");
nd1.setEtiqueta("Signo_Interrogacion");
nd1.setValor(interA.toString());
nd2.setEtiqueta("Expresion");
nd2.setValor(exp.toString());
nd3.setEtiqueta("Signo_Interrogacion");
nd3.setValor(interC.toString());
nd4.setEtiqueta("Palabra_Reservada");
nd4.setValor(en.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) in);
nd.AddHijos((Nodo1) lis);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

:}
            | tinterrogaciona:interA EXPRESIONARITMETICA:exp tinterrogacionc:interC prEntonces:en INSTRUCCIONES:in {:RESULT=exp;
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Instruccion Segun");
nd1.setEtiqueta("Signo_Interrogacion");
nd1.setValor(interA.toString());
nd2.setEtiqueta("Expresion");
nd2.setValor(exp.toString());
nd3.setEtiqueta("Signo_Interrogacion");
nd3.setValor(interC.toString());
nd4.setEtiqueta("Palabra_Reservada");
nd4.setValor(en.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) in);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
:}
;

// PARA

CICLO_FOR::= prPara:par tvariable:a tflecha:flech EXPRESIONARITMETICA:b prHasta:hast  EXPRESIONARITMETICA:c prHacer:hac INSTRUCCIONES:d prFinPara:fnpara {: a = a.replace("_",""); RESULT=d;
codigoTraducidoPython += "for " + a + " in " + b + ":" + "\n" + RESULT + "\n" ; 
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
Nodo1 nd8 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(par.toString());
nd2.setEtiqueta("Variable");
nd2.setValor(a.toString());
nd3.setEtiqueta("flecha");
nd3.setValor(flech.toString());
nd4.setEtiqueta("Expresion");
nd4.setValor(b.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(hast.toString());
nd6.setEtiqueta("Expresion");
nd6.setValor(c.toString());
nd7.setEtiqueta("Palabra_Reservada");
nd7.setValor(hac.toString());
nd8.setEtiqueta("Palabra_Reservada");
nd8.setValor(fnpara.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.AddHijos((Nodo1) d);
nd.AddHijos((Nodo1) nd8);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
nd8.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
:}
            | prPara:par tvariable:a tflecha:flech EXPRESIONARITMETICA:b prHasta:hast EXPRESIONARITMETICA:c prIncremental:incr EXPRESIONARITMETICA:d prHacer:hac INSTRUCCIONES:in prFinPara:fnpara {:
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
Nodo1 nd8 = new Nodo1();
Nodo1 nd9 = new Nodo1();
Nodo1 nd10 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(par.toString());
nd2.setEtiqueta("Variable");
nd2.setValor(a.toString());
nd3.setEtiqueta("flecha");
nd3.setValor(flech.toString());
nd4.setEtiqueta("Expresion");
nd4.setValor(b.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(hast.toString());
nd6.setEtiqueta("Expresion");
nd6.setValor(c.toString());
nd7.setEtiqueta("Palabra_Reservada");
nd7.setValor(incr.toString());
nd8.setEtiqueta("Expresion");
nd8.setValor(d.toString());
nd9.setEtiqueta("Palabra_Reservada");
nd9.setValor(hac.toString());
nd10.setEtiqueta("Palabra_Reservada");
nd10.setValor(fnpara.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.AddHijos((Nodo1) nd8);
nd.AddHijos((Nodo1) nd9);
nd.AddHijos((Nodo1) in);
nd.AddHijos((Nodo1) nd10);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
nd8.setIdNod(parser.cont);
nd9.setIdNod(parser.cont);
nd10.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
:}
            | prPara:par tvariable:a tflecha:flech EXPRESIONARITMETICA:b prHasta:hast EXPRESIONARITMETICA:c prHacer:hac prFinPara:fnpara {:

Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
Nodo1 nd8 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(par.toString());
nd2.setEtiqueta("Variable");
nd2.setValor(a.toString());
nd3.setEtiqueta("flecha");
nd3.setValor(flech.toString());
nd4.setEtiqueta("Expresion");
nd4.setValor(b.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(hast.toString());
nd6.setEtiqueta("Expresion");
nd6.setValor(c.toString());
nd7.setEtiqueta("Palabra_Reservada");
nd7.setValor(hac.toString());
nd8.setEtiqueta("Palabra_Reservada");
nd8.setValor(fnpara.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.AddHijos((Nodo1) nd8);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
nd8.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
:}
;
// MIENTRAS

CICLO_WHILE::= prMientras:mien CONDICIONMIENTRAS:con prHacer:hac INSTRUCCIONES:in prFinMientras:fnmientras {: RESULT += "while" + con + "\n"; 

Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(mien.toString());
nd2.setEtiqueta("Expresion");
nd2.setValor(con.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(hac.toString());
nd4.setEtiqueta("Palabra_Reservada");
nd4.setValor(fnmientras.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) in);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
:}
            | prMientras:mien CONDICIONMIENTRAS:con prHacer:hac prFinMientras:fnmientras {: codigoTraducidoPython += "while" + con + "\n"; 
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(mien.toString());
nd2.setEtiqueta("Expresion");
nd2.setValor(con.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(hac.toString());
nd4.setEtiqueta("Palabra_Reservada");
nd4.setValor(fnmientras.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

:}
;

CONDICIONMIENTRAS::= tvariable:a prEsIGUAL EXPRESIONARITMETICA:b {: a = a.replace("_", "");
  RESULT = "("+ a + "==" + b + "):" + "\n"; :}
            | tvariable:a prMayorIgual EXPRESIONARITMETICA:b {: a = a.replace("_", "");
  RESULT = "("+ a + ">=" + b + "):" + "\n"; :}
            | tvariable:a {: a = a.replace("_", "");
  RESULT = "while" + "("+ a + "):" + "\n"; :}
            | tvariable:a prMenorIgual EXPRESIONARITMETICA:b {: a = a.replace("_", "");
  RESULT = "while" + "("+ a + "<=" + b + "):" + "\n"; :}
            | tvariable:a prMayor EXPRESIONARITMETICA:b {: a = a.replace("_", "");
  RESULT = "while" + "("+ a + ">" + b + "):" + "\n"; :}
            | tvariable:a prMenor EXPRESIONARITMETICA:b {: a = a.replace("_", "");
  RESULT = "while" + "("+ a + "<" + b + "):" + "\n"; :}
            | tvariable:a prOR numero:b {: a = a.replace("_", "");
  RESULT = "while" + "("+ a + "or" + b + "):" + "\n"; :}
            | tvariable:a prAND numero:b {: a = a.replace("_", "");
  RESULT = "while" + "("+ a + "and" + b + "):" + "\n"; :}
            | prNOT EXPRESIONARITMETICA:b {:
  RESULT = "while" + "(" + "not" + b + "):" + "\n"; :}

;

//REPETIR HASTA

CICLO_DOWHILE::= prRepetir:rep INSTRUCCIONES:in prHastaQue:hastq CONDICIONMIENTRAS:con {:
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(rep.toString());
nd2.setEtiqueta("Palabra_Reservada");
nd2.setValor(hastq.toString());
nd3.setEtiqueta("Condicion");
nd3.setValor(con.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) in);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
:}
                | prRepetir:rep prHastaQue:hastq CONDICIONMIENTRAS:con {:
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(rep.toString());
nd2.setEtiqueta("Palabra_Reservada");
nd2.setValor(hastq.toString());
nd3.setEtiqueta("Condicion");
nd3.setValor(con.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

:}
;

//RETORNO

RETORNO::= prRetornar:retrn EXPRESIONARITMETICA:b tpuntoycoma:comaa {: RESULT += "\treturn " + b.toString() + "\n";
codigoTraducidoPython += RESULT;
codigoTraducidoGolang += "return " + b.toString() + "\n";
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(retrn.toString());
nd2.setEtiqueta("Expresion");
nd2.setValor(b.toString());
nd3.setEtiqueta("Puntocoma");
nd3.setValor(comaa.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
:}
;

//METODO

METODO::= prMetodo:met tvariable:b INSTRUCCIONES:in prFinMetodo:fnmetodo {: b = b.replace("_",""); RESULT= "\tdef " + b + "():" + "\n" + in + "\n";
pruebas= "\tdef " + b + "():" + "\n" + in + "\n";
codigoTraducidoPython += pruebas;
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(met.toString());
nd2.setEtiqueta("Variable");
nd2.setValor(b.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(fnmetodo.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) in);
nd.AddHijos((Nodo1) nd3);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

:}
        | prMetodo:met tvariable:b prConParametros:cnpara tparA:parA LISTAPARAMETROS:ls tparC:parC INSTRUCCIONES:in prFinMetodo:fnmetodo {:
b = b.replace("_","");
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(met.toString());
nd2.setEtiqueta("Variable");
nd2.setValor(b.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(cnpara.toString());
nd4.setEtiqueta("Parentesis");
nd4.setValor(parA.toString());
nd5.setEtiqueta("Parametros");
nd5.setValor(ls.toString());
nd6.setEtiqueta("Parentesis");
nd6.setValor(parC.toString());
nd7.setEtiqueta("Palabra_Reservada");
nd7.setValor(fnmetodo.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) in);
nd.AddHijos((Nodo1) nd7);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
:}
;

LISTAPARAMETROS::= tvariable:a prNumero:b {: a = a.replace("_", ""); RESULT=  a + b; :}
                | tvariable:a prCadena:b {: a = a.replace("_", ""); RESULT=  a + b; :}
                | tvariable:a prCaracter:b {: a = a.replace("_", ""); RESULT=  a + b; :}
                | tvariable:a prBoolean:b {: a = a.replace("_", ""); RESULT= a + b; :}
                | LISTAPARAMETROS:a tcoma:b tvariable:c prNumero:d {:c = c.replace("_",""); RESULT= a + b +c +d; :}
                | LISTAPARAMETROS:a tcoma:b tvariable:c prCadena:d {:c.replace("_",""); RESULT= a + b +c +d; :}
                | LISTAPARAMETROS:a tcoma:b tvariable:c prCaracter:d {: c.replace("_",""); RESULT= a + b +c +d; :}
                | LISTAPARAMETROS:a tcoma:b tvariable:c prBoolean:d {: c.replace("_",""); RESULT= a + b +c +d; :}
;

//FUNCIONES

FUNCIONES::= prFuncion:func tvariable:a TIPODATO:tdato INSTRUCCIONES:in prFinFuncion:fnfuncion {: a = a.replace("_",""); 
RESULT= "def " + a + "():" + "\n" + in + "\n" + "return " + "\n" ;  
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Entrada Funcion");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(func.toString());
nd2.setEtiqueta("Variable");
nd2.setValor(a.toString());
nd3.setEtiqueta("Tipo Dato");
nd3.setValor(tdato.toString());
nd4.setEtiqueta("Palabra_Reservada");
nd4.setValor(fnfuncion.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) in);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
:}
            | prFuncion:func tvariable:a TIPODATO:tdato prConParametros:cnpara tparA:parA LISTAPARAMETROS:b tparC:parC INSTRUCCIONES:in prFinFuncion:fnfuncion {: a = a.replace("_",""); 
RESULT= "def " + a + "(" + b + "):" + "\n" + in + "\n" + "return " + "\n" ;  
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
Nodo1 nd8 = new Nodo1();
nd.setEtiqueta("Entrada Funcion");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(func.toString());
nd2.setEtiqueta("Variable");
nd2.setValor(a.toString());
nd3.setEtiqueta("Tipo Dato");
nd3.setValor(tdato.toString());
nd4.setEtiqueta("Palabra_Reservada");
nd4.setValor(cnpara.toString());
nd5.setEtiqueta("Parentesis");
nd5.setValor(parA.toString());
nd6.setEtiqueta("Parametros");
nd6.setValor(b.toString());
nd7.setEtiqueta("Parentesis");
nd7.setValor(parC.toString());
nd8.setEtiqueta("Palabra_Reservada");
nd8.setValor(fnfuncion.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.AddHijos((Nodo1) in);
nd.AddHijos((Nodo1) nd8);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
nd8.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
:}
;


TIPODATO::= prNumero:b {: RESULT= b; :}
            | prCadena:b {: RESULT= b; :}
            | prCaracter:b {: RESULT= b; :}
            | prBoolean:b {: RESULT= b; :}
;



//LLAMADA DE FUNCIONES Y METODOS

EJECUTAR::= prEjecutar:ejec tvariable:a tparA:parA tparC:parC tpuntoycoma:comaa {: a = a.replace("_","");  RESULT= "\t" + a + parA + parC;
codigoTraducidoPython += RESULT;
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
nd.setEtiqueta("Entrada Ejecutar");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(ejec.toString());
nd2.setEtiqueta("Variable");
nd2.setValor(a.toString());
nd3.setEtiqueta("Parentesis");
nd3.setValor(parA.toString());
nd4.setEtiqueta("Parentesis");
nd4.setValor(parC.toString());
nd5.setEtiqueta("puntocoma");
nd5.setValor(comaa.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

 :}
            | prEjecutar:ejec tvariable:a tparA:parA LISTAPARAMETROS:c tparC:parC tpuntoycoma:comaa {: a = a.replace("_",""); RESULT= "\t" + a + parA + c + parC;
codigoTraducidoPython += RESULT;
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
nd.setEtiqueta("Entrada Ejecutar");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(ejec.toString());
nd2.setEtiqueta("Variable");
nd2.setValor(a.toString());
nd3.setEtiqueta("Parentesis");
nd3.setValor(parA.toString());
nd4.setEtiqueta("Parametros");
nd4.setValor(c.toString());
nd5.setEtiqueta("Parentesis");
nd5.setValor(parC.toString());
nd6.setEtiqueta("puntocoma");
nd6.setValor(comaa.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
:}
;


// impresiones

IMPRIMIR::= prImprimir:pri tcadena:n tpuntoycoma:comaa {:  RESULT= "\tprint" + "(" +  n + ")" + "\n";
//codigoTraducidoPython += "print" + "(" +  n + ")" + "\n";
//codigoTraducidoPython += RESULT;
codigoTraducidoGolang += "fmt.Println" + "(" + n + ")" + "\n";
n = n.replace("\"","");
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("Expresion");
nd2.setValor(n.toString());
nd3.setEtiqueta("Puntocoma");
nd3.setValor(comaa.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
:}
        | prImprimir:pri tvariable:b tpuntoycoma:comaa {:  b = b.replace("_", ""); RESULT= "\tprint" + "(" +  b + ")" + "\n";  
//codigoTraducidoPython += "print" + "(" + b + ")" + "\n";
codigoTraducidoPython += RESULT;
codigoTraducidoGolang += "fmt.Println" + "(" + b + ")" + "\n";
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("variable");
nd2.setValor(b.toString());
nd3.setEtiqueta("Puntocoma");
nd3.setValor(comaa.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
:}
        | prImprimir:pri tparA:parA tvariable:c tparC:parC tpuntoycoma:comaa {:  c = c.replace("_", ""); RESULT= "\tprint" + "(" +  c + ")" + "\n"; 
//codigoTraducidoPython += "print" + parA.toString() + c + parC.toString() + "\n";
codigoTraducidoPython += RESULT;
codigoTraducidoGolang += "fmt.Println" + "(" + c + ")" + "\n";
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("Parentesis");
nd2.setValor(parA.toString());
nd3.setEtiqueta("variable");
nd3.setValor(c.toString());
nd4.setEtiqueta("Parentesis");
nd4.setValor(parC.toString());
nd5.setEtiqueta("Puntocoma");
nd5.setValor(comaa.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

:}
        | prImprimir:pri tparA:parA tcadena:d tparC:parC tpuntoycoma:comaa {: RESULT= "\tprint" + "(" +  d + ")" + "\n";
//codigoTraducidoPython += "print" + parA.toString() + d + parC.toString() + "\n"; 
codigoTraducidoPython += RESULT;
codigoTraducidoGolang += "fmt.Print" + "(" + d + ")" + "\n";
d = d.replace("\"","");
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("Parentesis");
nd2.setValor(parA.toString());
nd3.setEtiqueta("Expresion");
nd3.setValor(d.toString());
nd4.setEtiqueta("Parentesis");
nd4.setValor(parC.toString());
nd5.setEtiqueta("Puntocoma");
nd5.setValor(comaa.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
:}
;


IMPRIMIRNL::= prImprimirNl:pri tcadena:n tpuntoycoma:comaa {: RESULT= "\tprint" + "(" + n + ")" + "\n";
//codigoTraducidoPython += "print" + "(" + n + ")" + "\n";
//codigoTraducidoPython += RESULT;
codigoTraducidoGolang += "fmt.Println" + "(" + n + ")" + "\n";
n = n.replace("\"","");
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("Expresion");
nd2.setValor(n.toString());
nd3.setEtiqueta("Puntocoma");
nd3.setValor(comaa.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
:}

            | prImprimirNl:pri tvariable:a tpuntoycoma:comaa {:  a = a.replace("_", ""); RESULT= "\tprint" + "(" + a + ")" + "\n";
//codigoTraducidoPython += "print" + "(" + a + ")" + "\n";
codigoTraducidoPython += RESULT;
codigoTraducidoGolang += "fmt.Println" + "(" + a + ")" + "\n";
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("Variable");
nd2.setValor(a.toString());
nd3.setEtiqueta("Puntocoma");
nd3.setValor(comaa.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
:}
            | prImprimirNl:pri tparA:parA tvariable:a tparC:parC tpuntoycoma:comaa {:  a = a.replace("_", ""); RESULT= "\tprint" + "(" + a + ")" + "\n";
//codigoTraducidoPython += "print" + parA.toString() + a + parC.toString() + "\n";
codigoTraducidoPython += RESULT;
codigoTraducidoGolang += "fmt.Println" + "(" + a + ")" + "\n";
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("Parentesis");
nd2.setValor(parA.toString());
nd3.setEtiqueta("variable");
nd3.setValor(a.toString());
nd4.setEtiqueta("Parentesis");
nd4.setValor(parC.toString());
nd5.setEtiqueta("Puntocoma");
nd5.setValor(comaa.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

:}
            | prImprimirNl:pri tparA:parA tcadena:a tparC:parC tpuntoycoma:comaa {: RESULT= "\tprint" + "(" + a + ")" + "\n";
//codigoTraducidoPython += "print" + parA.toString() + a + parC.toString() + "\n";
codigoTraducidoPython += RESULT;
codigoTraducidoGolang += "fmt.Println" + "(" + a + ")" + "\n";
a = a.replace("\"","");
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("Parentesis");
nd2.setValor(parA.toString());
nd3.setEtiqueta("Expresion");
nd3.setValor(a.toString());
nd4.setEtiqueta("Parentesis");
nd4.setValor(parC.toString());
nd5.setEtiqueta("Puntocoma");
nd5.setValor(comaa.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
 :}
;